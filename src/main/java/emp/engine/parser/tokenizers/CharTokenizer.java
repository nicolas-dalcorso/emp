package emp.engine.parser.tokenizers;

import java.util.List;
import java.util.ArrayList;

import emp.engine.parser.mappers.TokenMapper;
import emp.engine.primitives.token.Token;
import emp.engine.primitives.CharToken;
import emp.engine.primitives.CharTokenType;
import emp.engine.parser.mappers.CharTokenMapper;

/**
 * A {@code Tokenizer} that tokenizes a string into a sequence of {@code CharToken}s.
 * Uses a {@code CharTokenMapper} to map each character to a {@code CharTokenType}.
 * 
 * @see Tokenizer
 * @see CharToken
 * 
 * @author nrdc
 * @since 2.0.0
 * @version 2.0.0
 */
public class CharTokenizer{
	/**
	 * The input buffer to tokenize.
	 */
	private String input_buffer;
	
	/**
	 * The {@code CharTokenMapper} to use for mapping characters to
	 * {@code CharTokenType}s.
	 */
	private TokenMapper token_mapper;
	
	/**
	 * The {@code CharToken}s generated by this {@code CharTokenizer}.
	 */
	private ArrayList<CharToken> tokens;
	
	/**
	 * Constructs a new {@code CharTokenizer} with the specified input buffer.
	 * 
	 * @param input_buffer the input buffer to tokenize
	 */
	public CharTokenizer(String input_buffer) {
		this.input_buffer = input_buffer;
		this.token_mapper = null;
		this.tokens = new ArrayList<CharToken>();
		
		try {
            this.token_mapper = CharTokenMapper.getInstance();
        } catch (Exception e) {
        	e.printStackTrace();
        };
	};

	/**
	 * Tokenizes the input buffer and returns the tokens.
	 * 
	 * @return a list of tokens
	 */
	public ArrayList<CharToken> tokenize() {
		for (char c : this.input_buffer.toCharArray()) {
			//	Get current char's token type
			CharTokenType token_type = (CharTokenType) this.token_mapper.map(c);
			
			//	Create a new CharToken
			CharToken token = new CharToken(token_type, c + "");
			
			//	Add the token to the list of tokens
			this.tokens.add(token);
		};
		
		
		return this.tokens;
	};

	public ArrayList<CharToken> get_tokens() {
		if (this.tokens == null) {
			this.tokenize();
		};
		return this.tokens;
	}

	/**
	 * Gets the input buffer of this {@code CharTokenizer}.
	 * 
	 * @return the input buffer of this {@code CharTokenizer}
	 */
	public String get_input_buffer() {
		return this.input_buffer;
	};

	/**
	 * Sets the input buffer of this {@code CharTokenizer}.
	 * 
	 * @param input_buffer the new input buffer of this {@code CharTokenizer}
	 */
	public void set_input_buffer(String input_buffer) {
		this.input_buffer = input_buffer;
	};

	/**
	 * Gets the {@code CharTokenMapper} of this {@code CharTokenizer}.
	 * 
	 * @return the {@code CharTokenMapper} of this {@code CharTokenizer}
	 */
	public TokenMapper get_token_mapper() {
		return this.token_mapper;
	};

	/**
	 * Sets the {@code CharTokenMapper} of this {@code CharTokenizer}.
	 * 
	 * @param token_mapper the new {@code CharTokenMapper} of this
	 *                     {@code CharTokenizer}
	 */
	public void set_token_mapper(TokenMapper token_mapper) {
		this.token_mapper = token_mapper;
	};
};
